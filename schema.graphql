### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  user: User
}

scalar DateTime

type Mutation {
  updateTitle(id: Int!, title: String!): Server
}

type Query {
  servers: [Server]
}

type Server {
  author: User!
  canVote: Boolean
  content: String
  cover: String
  createdAt: DateTime!
  id: Int!
  ip: String!
  lastUpdated: DateTime!
  published: Boolean!
  slots: Int!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  title: String!
  version: Version!
  voteCount: Int
  votes(after: VoteWhereUniqueInput, before: VoteWhereUniqueInput, first: Int, last: Int): [Vote!]!
}

type ServerPayload {
  author: Int
  content: String
  cover: String
  createdAt: String
  id: Int
  published: Boolean
  slots: Int
  tags: Tag
  title: String
  version: Version
}

input ServerWhereUniqueInput {
  id: Int
}

type Tag {
  id: Int!
  popularity: Int
  Servers(after: ServerWhereUniqueInput, before: ServerWhereUniqueInput, first: Int, last: Int): [Server!]!
  tagName: String!
}

input TagWhereUniqueInput {
  id: Int
  tagName: String
}

type User {
  banned: Boolean
  email: String!
  id: Int!
  photoUrl: Boolean
  role: String
  Server: Server
  username: String
  Votes: Vote
}

type UserPayload {
  user: User
}

type Version {
  id: Int!
  Servers(after: ServerWhereUniqueInput, before: ServerWhereUniqueInput, first: Int, last: Int): [Server!]!
  versionName: String!
}

type Vote {
  author: User!
  createdAt: DateTime!
  id: Int!
  server: Server!
}

type VoteCast {
  outcome: String
}

input VoteWhereUniqueInput {
  createdAt: DateTime
  id: Int
}
