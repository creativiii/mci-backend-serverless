### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  user: User
}

type Mutation {
  addTag(id: Int!, tags: [String!]!): Server
  createServer(content: String, cover: String, ip: String!, tags: [String!]!, title: String!): Server
  deleteServer(id: Int!): Server
  oAuthLogin(code: String!): AuthPayload
  publishServer(id: Int!): Server
  refresh: AuthPayload
  removeTag(id: Int!, tag: String!): Server
  resetVotes(id: Int!): Server
  updateBan(banned: Boolean!, id: Int!): UserPayload
  updateContent(content: String!, id: Int!): Server
  updateCover(cover: String!, id: Int!): Server
  updateIp(id: Int!, ip: String!): Server
  updateRemoteInfo(id: Int!, ip: String!): Server
  updateRole(id: Int!, role: String!): UserPayload
  updateTitle(id: Int!, title: String!): Server
  vote(id: Int!): VoteCast
}

type Query {
  allServers: [Server]
  feed(date: String! = "2021-01-17T21:47:32.255Z", page: Int! = 0): [Server]
  me: User
  searchServers(date: String! = "2021-01-17T21:47:32.255Z", page: Int! = 0, searchString: String): [Server]
  searchTags(searchString: String!): [Tag]
  server(date: String! = "2021-01-17T21:47:32.255Z", id: Int): Server
  users: [User]
}

type Server {
  author: User
  canVote: Boolean
  content: String
  cover: String
  createdAt: String
  id: Int
  ip: String
  lastUpdated: String
  published: Boolean
  slots: Int
  tags: [Tag]
  title: String
  version: Version
  voteCount: Int
  votes: Vote
}

type Tag {
  id: Int
  popularity: Int
  Servers: Server
  tagName: String
}

type User {
  banned: Boolean
  email: String
  id: Int
  photoUrl: String
  role: String
  Servers: Server
  username: String
  Votes: Vote
}

type UserPayload {
  user: User
}

type Version {
  id: Int
  Servers: Server
  versionName: String
}

type Vote {
  author: User
  createdAt: String
  id: Int
  server: Server
}

type VoteCast {
  outcome: String
}
